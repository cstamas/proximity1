<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

	<!--
		=================================================================================
	-->

	<!--
		- WebDav storage adapter, using proximity itself as storage.
	-->
	<bean id="proximity.webdavstorage"
		class="org.abstracthorizon.proximity.webapp.webdav.ProximityWebdavStorageAdapter">
		<property name="proximity" ref="proximity" />
	</bean>

	<!--
		=================================================================================
	-->

	<!--
		- StatisticsGatherer, gathers statistics. Simple in-memory implementation.
	-->
	<bean id="proximity.statisticsGatherer"
		class="org.abstracthorizon.proximity.stats.SimpleStatisticsGathererImpl"
		init-method="initialize">
		<property name="proximity" ref="proximity" />
	</bean>

	<!--
		=================================================================================
	-->

	<!--
		- AccessManagers, to set some access restrictions if needed.
	-->

	<!--
		- With OpenAccessManager Proximity is wide open.
	-->
	<bean id="proximity.openAccessManager"
		class="org.abstracthorizon.proximity.access.OpenAccessManager" />

	<!--
		- With AffirmativeAccessManager, we will have access if all defined
		- voters vote AFFIRMATIVE.
		
		- We have currently ONE voter, that tries to resemble Apache HTTPD2 Basic Access Control.
		- We should suppply the allowFrom and denyFrom Java REGEX patterns and a boolean
		- TRUE for "Order allow,deny" or FALSE for "Order deny,allow" (a la Apache httpd)
		
		- Using these settings below, we have AccessManager that allows access for our
		- 192.168.0.x LAN only. Requests from outer network will be REJECTED, thus
		- Px is safe to sit on DMZ machine.
		- Please note, that this settings will REJECT LOCALHOST TOO! 127.0.0.1
		
		- If configured on Proximity bean level: the browse link will be inaccessible
		- If configured on Repository level: the browse will show top-level items but the
		- restricted repos will not allow download.
		- Play with differenct combinations!
		
		- And don't forget: you may have as much voter and accessManager beans as you love!
	-->
	<bean id="proximity.internalLanOnlyAccessManager"
		class="org.abstracthorizon.proximity.access.AffirmativeAccessManager">
		<property name="voters">
			<list>
				<bean
					class="org.abstracthorizon.proximity.webapp.access.IpAddressAccessDecisionVoter">
					<property name="allowDeny" value="true" />
					<property name="allowFromPattern"
						value="192\.168\.0\..*" />
					<property name="denyFromPattern" value=".*" />
				</bean>
			</list>
		</property>
	</bean>

	<!--
		=================================================================================
	-->

	<!--
		- Indexer, used to speed up searches ONLY.
		- It listens for Proximity events.
	-->
	<bean id="proximity.indexer"
		class="org.abstracthorizon.proximity.indexer.LuceneIndexer"
		init-method="initialize">
		<property name="proximity" ref="proximity"/>
		<!-- Where to store indexes? -->
		<property name="indexDirectory" value="${indexer.dir}" />
		<!-- On webapp start should i recreate Lucene indexes? -->
		<property name="recreateIndexes" value="true" />
		<!-- After how much of item insertion should i optimize indexes? -->
		<property name="dirtyItemTreshold" value="100" />
	</bean>

	<!--
		=================================================================================
	-->

	<!--
		- Logic used for Maven2 repositories.
		- Use seconds for setting timeout.
		- x > 0 - the expiration in seconds
		- x = 0 - the expiration flag is set to now, thus it will expire initially and be refetched always
		- x = -1 - turn off for the group expiration handling.
	-->

	<!-- A release (stable) repository logic, never expires nothing -->
	<bean id="proximity.maven2ReleaseRepoLogic"
		class="org.abstracthorizon.proximity.maven.MavenProxyRepositoryLogic">
		<!-- SNAPSHOTSs expires after NEVER -->
		<property name="snapshotExpirationPeriodInSeconds" value="-1" />
		<!-- Maven2 POMs expires after NEVER -->
		<property name="pomExpirationPeriodInSeconds" value="-1" />
		<!-- Maven2 metadatas (maven-metadata.xml and *.sha1 and *.md5) expires after NEVER -->
		<property name="metadataExpirationPeriodInSeconds" value="-1" />
		<!-- everything else will never expire once downloaded -->
		<property name="itemExpirationPeriodInSeconds" value="-1" />
		<!-- Should repository driven by this logic serve snapshots? -->
		<property name="shouldServeSnapshots" value="false" />
		<!-- Should repository driven by this logic serve releases? -->
		<property name="shouldServeReleases" value="true" />
	</bean>

	<!-- A snapshot (unstable) repository logic, generally 24h is expiration -->
	<bean id="proximity.maven2SnapshotRepoLogic"
		class="org.abstracthorizon.proximity.maven.MavenProxyRepositoryLogic">
		<!-- SNAPSHOTSs expires after 12h -->
		<property name="snapshotExpirationPeriodInSeconds"
			value="43200" />
		<!-- Maven2 POMs expires after 12h -->
		<property name="pomExpirationPeriodInSeconds" value="43200" />
		<!-- Maven2 metadatas (maven-metadata.xml and *.sha1 and *.md5) expires after 12h -->
		<property name="metadataExpirationPeriodInSeconds"
			value="43200" />
		<!-- everything else will expire once downloaded after 12h -->
		<property name="itemExpirationPeriodInSeconds" value="43200" />
		<!-- Should repository driven by this logic serve snapshots? -->
		<property name="shouldServeSnapshots" value="true" />
		<!-- Should repository driven by this logic serve releases? -->
		<property name="shouldServeReleases" value="false" />
	</bean>

	<!--
		=================================================================================
	-->

	<!--
		- ItemPropertiesFactory used for repositories.
		- It inspects the files using the registered inspectors.
	-->

	<!--
		- ItemPropertiesFactory, creates "extra" metadata about files.
	-->
	<bean id="proximity.itemPropertiesFactory"
		class="org.abstracthorizon.proximity.metadata.InspectorListProcessingProxiedItemPropertiesFactory">
		<property name="itemInspectorList">
			<list>
				<bean
					class="org.abstracthorizon.proximity.maven.MavenItemInspector" />
				<bean
					class="org.abstracthorizon.proximity.metadata.inspectors.ZipFileInspector" />
				<bean
					class="org.abstracthorizon.proximity.metadata.inspectors.JarFileInspector" />
			</list>
		</property>
	</bean>

</beans>