# Messages for px-webapp

proximity.product.name=Proximity
proximity.product.version=${pom.version}

common.yes=Yes
common.no=No
common.enabled=Enabled
common.disabled=Disabled

links.documentation=Documentation
links.search=Search
links.repositories=Repositories
links.stats=Statistics
links.maintenance=Maintenance
links.artifactBrowse=Browse artifacts
links.repoBrowse=Browse files

repositorylist.name=Repository browsing
repositorylist.pathLinks=Path:
repositorylist.root=ROOT
repositorylist.pathSeparator=/
repositorylist.hosted=Hosted item
repositorylist.proxied=Proxied item
repositorylist.snapshot=Maven SNAPSHOT
repositorylist.pom=Maven2 POM
repositorylist.metadata=Maven metadata
repositorylist.artifact=Maven artifact
repositorylist.prjHome=Project home:<br/>
repositorylist.getOriginal=Get original from:<br/>
repositorylist.delete=Delete
repositorylist.expand=Expand properties
repositorylist.repoGroup=Repository group

artifactslist.name=Artifacts browsing
artifactslist.pathLinks=Namespace:
artifactslist.root=ROOT
artifactslist.pathSeparator=::
artifactslist.hosted=Hosted item
artifactslist.proxied=Proxied item
artifactslist.group=Group
artifactslist.artifact=Artifact
artifactslist.version=Version
artifactslist.getartifact=Get artifact
artifactslist.location=Proximity location

item.kind=Kind
item.path=Path
item.name=Name
item.size=Size
item.repositoryId=Origin
item.repositoryGroupId=Group
item.lastModified=Last modified

search.title=Repository search
search.intro=Using Search forms you may search <b>downloaded</b> items in general or from specific remote peer. This page <b>does not</b> search the actually proxied remote peers, only items that are downloaded from them!
search.button=Go
search.all=Search All
search.selectedRepository=Search Selected Repository
search.selectedGroup=Search Selected Repository Group
search.byName=Artifact name
search.lql=Lucene query
search.lql.intro=Pass a standard Lucene Query to Proximity. You may use any form of valid Lucene 2.0 Query (for help see at the end of page):
search.lql.example=Examples (presumes the files are in your local storages and index exists): <ul><li><i>repository.id:inhouse AND _name:ismicro-proximity*</i> will return all items in repository with ID "inhouse" and that names starts with "ismicro-proximity".</li><li><i>item.ext:pom AND pom.gid:org.apache.maven.* OR pom.aid:wagon*</i> will return POM's that have groupId's starting with "org.apache.maven" or have artifactId's starting with "wagon"</li><li><i>jar.files:StandardService*</i> should return ActiveIO JAR file, since it contains class named "StandardServiceStack.class" and "StandardServiceStackGBean.class".</li><li><i>item.hash.sha1:8c8ad6a96a8c1168f8b12ec8a227b8261b160b26</i> returns <b>only and only</b> classworlds-1.1-alpha-2.pom POM file.</li><li><i>item.lastModified:[2006.06.07 TO 2006.06.09]</i> list items that modified on given date range.</li><li><i>pom.deps:classworlds:classworlds:*</i> returns all artifacts from index that depends on classworlds of any version.</li></ul>
search.lql.kw=The Indexer reports the following list of keywords, that you may use in query. All keywords are <b>tokenized</b> by Lucene, unless otherwise stated:
search.lql.kw._name=Item's filename (eg. '_name:classworlds*'), untokenized.
search.lql.kw._path=Item's dirname (eg. '_path:/classworlds/*'), untokenized.
search.lql.kw._repo=Item's Repository ID (eg. '_repo:central'), untokenized.
search.lql.kw._group=Item's Repository Group ID (eg. '_group:public'), untokenized.
search.lql.kw.item.directoryPath=Item directory.
search.lql.kw.item.name=Item name.
search.lql.kw.item.filesize=Item filesize (in bytes).
search.lql.kw.item.lastModified=Item timestamp (formatted as '2005.12.20 16:17:50 +0000', usable in range queries, see examples).
search.lql.kw.item.isDirectory=Is item directory? (ex. 'item.isDirectory:false')
search.lql.kw.item.isFile=Is item file? (ex. 'item.isFile:false')
search.lql.kw.item.isCached=Item is cached? (in proxied repo, ex. 'item.isCached:true')
search.lql.kw.item.ext=Extension of item if any.
search.lql.kw.item.remoteUrl=The origin URL of item. 
search.lql.kw.item.hash.md5=MD5 hash of file.
search.lql.kw.item.hash.sha1=SHA1 hash of file.
search.lql.kw.repository.id=Repository ID of item.
search.lql.kw.repository.groupId=Repository group ID of item.
search.lql.kw.item.origin=Originating URL of item is proxied.
search.lql.kw.m2kind=Maven2 kind of item (currently: pom, snapshot, metadata).
search.lql.kw.pom.gid=The POM group ID.
search.lql.kw.pom.aid=The POM artifact ID.
search.lql.kw.pom.pck=The POM packaging (eg. 'jar', 'war', 'maven-plugin', etc.).
search.lql.kw.pom.version=The POM version.
search.lql.kw.pom.deps=The POM dependencies, a list of (gid):(aid):(version) forms.
search.lql.kw.pom.parent=The POM parent, if any in form (gid):(aid):(version).
search.lql.kw.zip.dirs=Directories contained by ZIP (eg. 'zip.dirs:service*').
search.lql.kw.zip.files=Files contained by ZIP (eg. 'zip.files:StandardService*').
search.lql.kw.jar.files=Files contained by JAR (eg. 'jar.files:StandardService*').
search.lql.kw.jar.dirs=Directories contained by JAR (eg. 'jar.dirs:service*').
search.lql.kw.jar.mf=Search META-INF of Jar.

maintenance.title=Maintenance
maintenance.intro=
maintenance.reindex.title=Reindexing
maintenance.reindex.intro=Reindexing is needed when you deploy new artifact onto local repository and need it to be availble in index for fast searches. Without reindexing the item WILL BE downloadable, but the index will not contain it, thus will not appear in search results. Be warned, that reindexing of large repositories are time consuming operation. Better use the reindex operation on one repository.
maintenance.reindex.all=Reindex All
maintenance.reindex.selected=Reindex Selected

stats.title=Repository statistics
stats.intro=Statistics are gathered during Proximity runtime. They are <b>not</b> transient by default. Actually, it depends on StatisticsGatherer implementation. The default gatherer is SimpleStatisticsGatherer, which holds data in memory, thus not appropriate for larger deployments.
stats.last10LocalHits=Last 10 Local hits
stats.last10RemoteHits=Last 10 Remote hits
stats.last10Artifacts=Last 10 served artifacts
stats.last10IpAddresses=Last 10 requests
stats.item.name=Name
stats.item.path=Path
stats.item.accessed=Access count
stats.item.ipaddress=IP Address of the request

# Escape these texts (*.help) for JavaScript since it is used for tooltip generation
repositories.title=Served repositories
repositories.intro=<br/>
repositories.repoTitle.proxied=<b>Proxied repository</b> 
repositories.repoTitle.hosted=<b>Hosted repository</b>
repositories.id=Repository ID
repositories.id.help=The unique ID of the repository by which is it identified.
repositories.groupId=Repository Group ID
repositories.groupId.help=The ID of the repository group. If <b>emergeRepositoryGroups</b> on Proximity bean is true, append this ID to the end of offered URLs below. The repositories in same group are <b>aggregated</b>!
repositories.rank=Repository rank
repositories.rank.help=The rank of the repository group. As smaller rank, as closer to the 1st place in repository list (absolute and group). Needed to define linear ordering between repositories. Repositories with same rank have undefined position compared to each other!
repositories.isAvailable=Is available?
repositories.isAvailable.help=If Repository is unavailable, it will reject all requests.
repositories.isOffline=Is offline?
repositories.isOffline.help=If repository is offline, it will not reach it\\'s remote peer and will serve only locally available (published or cached) artifacts.
repositories.isListable=Is listable?
repositories.isListable.grouped=within group
repositories.isListable.help=If repository is listable, it is visible within Repository Browsing interface, otherwise it\\'s artifacts are not visible/browsable. Still, even if not listable, repository will serve direct GET requests (Maven WILL get served). 
repositories.remoteStorage=Remote storage
repositories.remote.url=Proxied remote URL
repositories.remote.url.help=The HTTP published artifacts from this URL and below are proxied onto Proximity by each request not found on Proximity.
repositories.remote.timeout=Connection timeout (ms)
repositories.remote.timeout.help=The HTTP Connection timeout in miliseconds.
repositories.remote.retryCount=Connection retry count
repositories.remote.retryCount.help=Proximity will retry the HTTP remote retrieval without failing by configured times. Usable if your proxied repo likes to throw HTTP 500 errors like Ibiblio does.
repositories.remote.proxyHost=HTTP Proxy hostname
repositories.remote.proxyHost.help=The hostname of the configured HTTP proxy that uses Proximity. Empty if none configured.
repositories.localStorage=Local/Cache storage
repositories.local.basedir=Local storage location
repositories.local.basedir.help=The location of the local storage.
repositories.local.metadataAware=Is metadata aware?
repositories.local.metadataAware.help=Allows custom extension of Proximity Item Properties. Recommended is to enable it.
repositories.repoUrl=Repository URL
repositories.repoUrl.proxied=You have to setup this proxied repository in settings.xml to make Maven2 use it instead of remote one.
repositories.repoUrl.hosted=You have to setup this hosted repository in your POM (as repository and/or plugin repository) or settings.xml (inside profile) to make Maven2 aware of it.
repositories.repoUrl.grouped=Be aware, that this URL points to <b>repository group</b>, so on this URL are all member repositories available!
repositories.repoUrl.help=Use these URLs to configure Maven2. Naturally, change appropriately the hostname where Proximity runs.
repositories.proximity.emergeRepositoryGroups=Is Proximity emerging repository groups?
repositories.proximity.emergeRepositoryGroups.help=If emerging of repository groups is active, Proximity will prepend all URLs with repository groupIDs. If not, all repositories are <b>flattened</b> and <b>unwanted artifact spoofing may happen</b>.
repositories.proximity.emergeRepositoryGroups.true=<b>YES</b>, the first level of the repository are <b>repository groups</b>. Repository aggregation happens only on repositories within <b>same group</b>.
repositories.proximity.emergeRepositoryGroups.false=<b>NO</b>, all repositories are on the "root". Still, repository aggregation happens only on repositories within <b>same group</b>.<br/><b>WARNING: UNWANTED ARTIFACT SPOOFING MAY HAPPEN!</b>
repositories.proximity.repolist=Proximitied repositories (absolute order)
repositories.proximity.repolist.help=The complete list of repositories hosted or proxied by Proximity in <b>search order</b>. 
repositories.proximity.repogrouplist=Repository grouping (group order)
repositories.proximity.repogrouplist.help=The complete list of repositories hosted or proxied by Proximity by groups in <b>group search order</b>.
repositories.mavenLogic=Maven specific settings
repositories.mavenLogic.help=These settings affects how responds Proximity to Maven requests. Item expirations and snapshot policies are one of them.
repositories.mavenLogic.shouldServeSnapshots=Should serve SNAPSHOTs?
repositories.mavenLogic.shouldServeSnapshots.help=If true, Proximity will allow SNAPSHOT artifact retrieval from this repository, othwewise it will explicitly forbid, <b>even if there are SNAPSHOTs in this repository</b>.
repositories.mavenLogic.shouldServeReleases=Should serve releases?
repositories.mavenLogic.shouldServeReleases.help=If true, Proximity will allow non-SNAPSHOT artifact retrieval from this repository, othwewise it will explicitly forbid, <b>even if there are releases in this repository</b>.
