                           ----------------------
                           Corporate Environment
                           ----------------------
                           Cservenak Tamas
                           ----------------------
                           2006. 06. 21.


Corporate environment

  The Corporate Environment (CE) differs from a common Open Source needs (OS) in many ways. First of all,
many commercial projects will need artifacts not found on any remote repository. Second, CE will probaly
have some built infrastructure (internal LAN) and internal guidelines for using public internet or even 
it may completely prohibit it (NTLM proxy?)! Third, it needs to share non-OS artifacts amongst it's developers created 
in mid-step of development not uploadable to any existing remote repository -- and reasonably -- 
it should <<not be deployed>> outside the (logical or physical) borders of the company itself. Furthermore,
the CE may want even to restrict the inner accessibility of artifacts to various 
[developers | developer groups | project members]. Lastly,
but not least important, the CE wants to be protected from various remote repository outage. 

  As we see, these CE specific needs differs a lot from a common OS project. Let's break down these
requirements one-by-one.


* Artifacts not on OS remote repositories

  This problem can be easily overcome by <<creating internal remote repositories>>. By creating an internal
repository you can share resources amongst your developers without compromising their licenses. 

  It is advisable to create one common repository to store all non-OSS artifacts not deployable to 
"public" Maven2 repositories because of their license (like Oracle JDBC driver -- free as a free beer) or 
because it is part of some purchased commercial product (some JAR bindings that came with a product 
bought by company itself).

  These artifacts are <<not deployable>> to any of public remote repositories, it is even not an interest of
a company unless software piracy is one of it's profile :)

  By creating internal repository, CE is able to tune POM or use some company level "superPOM" (recommended)
where these internal repositories will be set up. There should be a company-level person, who could
manage requests for company-level internal repository management, artifact deployment and/or updates.


* Internal network

  This theme may cover a lot. Is the CE liberal and allows outbound traffic to any developer as needed? Or
it prohibits any of outbound traffic?

  In any case, Proximity may help a lot. The most evident is that Proximity (as any proxy) will reduce
the outbound traffic and reduce the <<build time latency>>, since Maven2 will query repository on LAN and
not on the Internet.

  Furthermore, if CE is restrictive, Proximity may be used to "tunnel" the repositories down to developers 
simply by piping Proximity instances. Thus, developer will have no internet access (even human errors are
disqualified) but Maven2 will be able to do the build!


* Sharing of internal-only artifacts

  The solution is quite similar if not equal to creating internal remote repositories. You can create 
one dedicated inhouse repository used to share in-house artifacts amongst users. Moreover, you can create 
internal repositories per-project to be able to fine-tune access to them. Just as with non-OSS artifacts, there
should be a person per-project who will be responsible for deployment authorization into this repository.

* Authorization

  This is highly CE dependent. What technology is used as authentication source? Is it Windows ADS or Samba?
This configuration is actually resolvable with HTTP server at "rough" level, but to fine tune it on
artifact level you can use AccessManager component of Proximity.

* Maven2 environment robustness

  Maven2 build cycle is simple: if it needs some artifact, and it got HTTP error 500 during it's remote 
retrieval, the <<build will fail>>, even if this error happened during some plugin update search! The 500
HTTP error is considered fatal during build. Unfortunately, HTTP 500 is quite frequent and stochastic on 
overhelmed ibiblio server. The solution with Proximiy is simple: on a remote GET command Proximity internally
makes maximum 3 (configurable) retries, thus "saving" us of this sporadic HTTP 500 thrown due to high 
hit-rate of ibilio. Also, Proximity is able to work in "offline" mode, offering what it have locally 
(in hosted or proxied repository) in case we know some remote peer is down. In offline mode, proximity will
offer the contents of it's cache or hosted repository but <<will not try to contact remote peer>>.

  This way, we can made our build as robust as needed.
  
A possible solution

  TODO.
