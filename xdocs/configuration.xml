<?xml version="1.0" encoding="UTF-8"?>

<document>

  <properties>
    <author email="cservenak@is-micro.hu">CSERVENAK, Tamas</author>
    <title>ISmicro Projects</title>
  </properties>

  <meta name="keyword" content="ismicro java"/>

<body>

<section name="Proximity Configuration">

<p>Proximity is made up from the following components:</p>

<ul>
<li><b>Proximity</b> - handles one or more repository. The order of the
configured repositories is important (first listed gets first queried).
It may have also accessManager defined to control Proximity access.</li>
<li><b>Repository</b> - may have local storage and remote storage defined. It have
also pluggable logic to advice the retrieval. Indexer, accessManager and stats gatherer
are optional.</li>
<li><b>Storage</b> - a generic interface, which covers all kind a storage.
It may be local or remote, with any kind of underlying protocol (FTP, NFS, HTTP, etc)</li>
<li><b>RemoteStorage</b> - a storage subinterface, which covers all kind a 
remote-storage. It may be kind of underlying protocol (FTP, NFS, HTTP, etc), but
Repository KNOWS it is REMOTE.</li>
<li><b>RepositoryLogic</b> - advices the retrieval.</li>
<li><b>StatisticsGatherer</b> - gathers statistics if present.</li>
<li><b>Indexer</b> - maintains index of cached items if present.</li>
<li><b>AccessManager</b> - Controls access to Proximity and/or certain Repository.</li>
</ul>

<p>Proximity out-of-the-box offers one remote peer implementation based
on Jakarta Commons HttpClient and two storage implementation: one read-only
file system storage (useful for locally offered artifacts) and writable file 
system storage (useful for caching remote storages).</p>

<p>Currently three (pretty naive) logic implementation exists: one simple 
proxy like (crude, without timeout or something), one with general expiration
support (applied to all handled artifacts/files) and one "Maven1/2 aware" (have
expiring options for these Maven "types": POM, Snapshot, Metadata and all 
other files).</p>

<p>See <a href="multiproject/px-core/xref/index.html">source</a> for more
info.</p>

<subsection name="Proximity">

<p>Handles one or more repository. The simple and clean implementation, using
"first-got is served", thus the order of configured repositories is important.
It simply aggregates the output (in case of listing) of multiple repositories
into one output.</p>

</subsection>

<subsection name="Repository">

<p>A simple junction of three things: local storage, remote storage and logic. 
A repository may have only local storage (eg. offering in-house artifacts), or 
just a remote peer (acts in proximity's aggregation, simplifies developer side 
configuration) or may have both. If the storage is writable, it will act as 
caching proxy. It may have also Indexer and Logic defined, see later.</p>

</subsection>

<subsection name="Storage">

<p>A storage is a "local" (altough transport protocol is not bounded in any way).
It may be writable (WritableFileSystemStorage), thus a repository may have 
write access to it.</p>

<p>A Storage may be "metadata-aware", thus be able to store
any extended metadata not provided from file system (like originating URL of
Artifact, other custom key-value pairs, etc).</p>

</subsection>

<subsection name="Remote Storage">

<p>A remote storage is a storage that is remote, like the Ibiblio repository. There
is one implementation using Jakarta Commons HttpClient, but the transport protocol
is not bounded in any way. The remote peer may be writable (WritableRemotePeer)
and may be used to publish artifacts (TODO) using DAV or some other transport
protocol.</p>

</subsection>

<subsection name="Repository Logic">

<p>The logic advises Repository how to behave on various artifact requests.
Currently three logic implementation logic exists: DefaultProxyingLogic, that
simply stores locally everything remotely retrieved, it will never refetch
and sends every file (not directories) to indexing. DefaultExpiringProxyingLogic
is like previous one, but it applies extra metadata "expires" on all artifiact
of configurable amount, refetching items after expiration. The MavenProxyLogic
recognizes Maven1/2 SNAPSHOTs, Maven 2 metadatas and POMs. It allows to set
expiration for these types or to refetch them as needed (no caching).</p>

</subsection>

<subsection name="Statistics Gatherer">

<p>A simple stats gatherer. Should be done using AOP.</p>

</subsection>

<subsection name="Indexer">

<p>Indexer is responsible for indexing cached items. Currently Apache Lucene 
indexer is implemented with crude search capabilities (Actually the UI is
crude, the Proximity API is finished [or isn't?]).</p>

</subsection>

<subsection name="Access Manager">

<p>AccessManager is responsible for Access Control. It is an interface actually,
allowing to implement any kind of AccessManagers. There exists thre default implementations.</p>

</subsection>

</section>

<section name="A simple case: A Company">

<p>Briefly, we can have Proximity configured with five repositories (in this order):</p>

<ol>
<li>inhouse - in-house artifacts,</li>
<li>extNonFree - Oracle JDBC, J2EE stuff,</li>
<li>extFree - stuff not (yet?) found on ibiblio and other places, like DWR</li>
<li>ibiblio - official M1/M2 repo, </li>
<li>codehaus - codehaus repo.</li>
</ol>

<p>As we stated before, the strategy of Proximity is got-first-serve-first, so
the order of repositories is important. Putting ibilio or codehaus first
would slow down builds of in-house projects containing in-house development
SNAPSHOT's because of HTTP 404 roundtrips. But, the order of repositories is
up to user to set up. This is just a tip.</p>

<p>The Proximity WAR comes preconfigured as Maven proxy like this (infrastructure
from Spring config omitted):</p>

<source>
<![CDATA[
    <!--
      - Central proximity bean and it's helper.
    -->
	<bean id="proximity" class="hu.ismicro.commons.proximity.base.ProximityImpl" init-method="afterPropertiesSet">
		<property name="repositories">
			<list>
				<ref local="inhouse"/>
				<ref local="extNonFree"/>
				<ref local="extFree"/>
				<ref local="ibiblio"/>
				<ref local="codehaus"/>
			</list>
		</property>
		<property name="indexer" ref="indexer"/>
		<property name="statisticsGatherer" ref="stats"/>
	</bean>

	<bean id="stats" class="hu.ismicro.commons.proximity.base.StatisticsGathererImpl"/>

	<bean id="indexer" class="hu.ismicro.commons.proximity.base.indexer.LuceneIndexer" init-method="afterPropertiesSet">
		<property name="indexDirectory" value="${indexer.dir}" />
		<property name="recreateIndexes" value="true"/>
	</bean>

    <!--
      - IBIBLIO Repository (with writable storage and remote peer)
      - A standard maven repository.
    -->
	<bean id="ibiblio" class="hu.ismicro.commons.proximity.base.RepositoryImpl">
		<property name="id" value="ibiblio"/>
		<property name="localStorage" ref="ibiblioFSStorage"/>
		<property name="remoteStorage" ref="ibiblioRemotePeer"/>
		<property name="indexer" ref="indexer"/>
		<property name="statisticsGatherer" ref="stats"/>
		<property name="repositoryLogic">
			<bean class="hu.ismicro.commons.proximity.base.logic.MavenProxyLogic">
				<property name="pomExpirationPeriod" value="0" />
			</bean>
		</property>
	</bean>

	<bean id="ibiblioFSStorage" class="hu.ismicro.commons.proximity.base.local.WritableFileSystemStorage">
		<property name="baseDir" value="${ibiblioFSStorage.baseDir}"/>
	</bean>
	
	<bean id="ibiblioRemotePeer" class="hu.ismicro.commons.proximity.base.remote.HttpClientRemotePeer">
		<property name="remoteUrl" value="http://www.ibiblio.org/maven/"/>
		<property name="connectionTimeout" value="30000"/>
	</bean>

    <!--
      - Codehaus Repository (with writable storage and remote peer)
      - A standard maven repository.
    -->
	<bean id="codehaus" class="hu.ismicro.commons.proximity.base.RepositoryImpl">
		<property name="id" value="codehaus"/>
		<property name="localStorage" ref="codehausFSStorage"/>
		<property name="remoteStorage" ref="codehausRemotePeer"/>
		<property name="indexer" ref="indexer"/>
		<property name="statisticsGatherer" ref="stats"/>
		<property name="repositoryLogic">
			<bean class="hu.ismicro.commons.proximity.base.logic.MavenProxyLogic">
				<property name="pomExpirationPeriod" value="0" />
			</bean>
		</property>
	</bean>

	<bean id="codehausFSStorage" class="hu.ismicro.commons.proximity.base.local.WritableFileSystemStorage">
		<property name="baseDir" value="${codehausFSStorage.baseDir}"/>
	</bean>
	
	<bean id="codehausRemotePeer" class="hu.ismicro.commons.proximity.base.remote.HttpClientRemotePeer">
		<property name="remoteUrl" value="http://dist.codehaus.org/"/>
		<property name="connectionTimeout" value="30000"/>
	</bean>

    <!--
      - In-House Repository (with read-only storage and without remote peer)
      - A maven repository for publishing in-house artifacts.
    -->
	<bean id="inhouse" class="hu.ismicro.commons.proximity.base.RepositoryImpl">
		<property name="id" value="inhouse"/>
		<property name="localStorage" ref="inhouseFSStorage"/>
		<property name="indexer" ref="indexer"/>
		<property name="statisticsGatherer" ref="stats"/>
	</bean>

	<bean id="inhouseFSStorage" class="hu.ismicro.commons.proximity.base.local.ReadOnlyFileSystemStorage">
		<property name="baseDir" value="${inhouseFSStorage.baseDir}"/>
		<property name="metadataAware" value="false"/>
	</bean>

    <!--
      - EXT NonFree Repository (with read-only storage and without remote peer)
      - A maven repository for in-house use for publishing non-free artifacts 
      - not deployed on standard maven repositories (oracle JDBC, J2EE, etc...).
    -->
	<bean id="extNonFree" class="hu.ismicro.commons.proximity.base.RepositoryImpl">
		<property name="id" value="extNonFree"/>
		<property name="localStorage" ref="extNonFreeFSStorage"/>
		<property name="indexer" ref="indexer"/>
		<property name="statisticsGatherer" ref="stats"/>
	</bean>

	<bean id="extNonFreeFSStorage" class="hu.ismicro.commons.proximity.base.local.ReadOnlyFileSystemStorage">
		<property name="baseDir" value="${extNonFreeFSStorage.baseDir}"/>
		<property name="metadataAware" value="false"/>
	</bean>

    <!--
      - EXT Free Repository (with read-only storage and without remote peer)
      - A maven repository for in-house use for publishing artifacts 
      - not deployed on standard maven repositories (dwr, etc...).
    -->
	<bean id="extFree" class="hu.ismicro.commons.proximity.base.RepositoryImpl">
		<property name="id" value="extFree"/>
		<property name="localStorage" ref="extFreeFSStorage"/>
		<property name="indexer" ref="indexer"/>
		<property name="statisticsGatherer" ref="stats"/>
	</bean>

	<bean id="extFreeFSStorage" class="hu.ismicro.commons.proximity.base.local.ReadOnlyFileSystemStorage">
		<property name="baseDir" value="${extFreeFSStorage.baseDir}"/>
		<property name="metadataAware" value="false"/>
	</bean>
]]>
</source>

</section>

</body>
</document>
